- POST: /login: 
	+ body: email (text), password(text) 
	+ -> validate the account with corrent Email and pass ? return page with status 200 and user account json : return page with 404

- POST: /register
	+ body: username, password, email, phone, address, remember = true(add token if this property exist as true)
	+ token, user_img default as NULL, role = 0(user), status = 1(active)
	+ -> validate email if dupplicate ? return 404 : return 200 -> json

CRUD POST
- GET: /posts
	+ body: none
	+ -> return all post from database by an array json [ {}, {} ]
- POST: /posts/newPost
	+ body: title, content, reference
	+ add a post to database successful ? -> json : -> 400
- PUT: /posts/:post_id
	+ body: title, content, reference
	+ update post ? -> json : -> 400
- DELETE: /posts/:post_id
	+ body: none
	+ delete post ? -> json : -> 400


CRUD SERVICES
- GET: /services
	+ body: none
	+ -> return all service from database by array json 
- GET: /services/:service_name
	+ body: none
	+ -> return service json ? -> json : -> 404
- POST: /services/:service_name
	+ body: name, description, price
	+ status = 1(on-use and 0 mean off-use)
	+ add new service successful ? -> json : -> 400
- PUT: /services/:service_name
	+ body: name, descripton, status, price
	+ update status of service, update name, des, price successfull ? -> json : -> 400
- DELETE: /services/:service_name
	+ body: none
	+ update status of service from on -> off
	+ update successful ? -> json : -> 400
---------------------------------------------------------------------------------------------------------------------

- GET: /account/:accId
	+ body: accId
	+ -> return the acc json with accId params ? -> json : -> 404

- GET: /account/:accId/birds
	+ body: accId
	+ -> return the array bird json of accId ? -> [ json ] -> 404

- GET: /account/:accId/:birdId
	+ body: accId, birdId
	+ -> return the bird json of accId ? -> json : -> 404

- POST: /account/:accId/newBird
	+ body: bird_name, species, breed, age, gender, description
	+ -> add successful and bird_name different ? -> bird json : -> 404

- PUT: /account/:accId/:birdId
	+ body: bird_name, bird_type(text), breed, age, gender, description
	+ this api will check btype_id and add to Birds -> update successful and bird_name different ? -> bird json : -> 404

- DELETE: /account/:accId/:birdId
	+ body: none
	+ -> delete successful ? -> bird json (deleted) : -> 400

- POST: /account/:accId/newBooking (7)
	+ body: accId, birdId, serviceId: ['1', '2', '3' (example)], date_from, date_to
	+ -> set status default as 0: pending, create BookingDetail information(link booking_id, service_id, booked_price(get from Service table)) -> transaction add successful ? -> json Booking : -> 400

	+ return successful ? -> json : -> 404

- GET: /account/:accId/:booking_id/services
	+ body: accId, booking_id
	+ return all services of booking_id as [json], include {booking_id, services: [{service_id, service_name, booked_price}]}

- GET: /account/:accId/:bookingId/reports
	+ body: none
	+ return detail report information of booking_id
	+ include an array of report json and each json include {date, service_report_image, service_report_text, feedback_content} -> [{}, {}, {}]
	
- POST:  /account/:accId/:bookingId/newReport
	+ body: service_report_image, service_report_text
	+ post a report of 1 day 
	+ date will be current date add to this "date" field when call this api
	+ add new report successful ? -> json : -> 400
- GET/PUT/DELETE: /account/:accId/:bookingId/:dreport_id
	+ get fail -> 404
	+ put: update image and text (service_report_image, service_report_text)
	+ delete: delete this report (nearly never use) (dreport_id)
	+ put/ delete fail -> 400
- POST: /account/:accId/:bookingId/:dreport_id 
	+ body: content
	+ add an feedback to a day of dreport_id
	+ successful ? -> json : -> 400


=============update
- GET /account/:accId/:bookingId/bookingDate
	+ body: none
	+ get all date of report (no duplicate) from date_from -> date_to
	+ format: yyyy-mm-dd
	+ return as array json 
	+ ex: (booking from 2022-12-02 to 2022-12-04) ['2022-12-02','2022-12-03', '2022-12-04']
- GET /account/:accId/:bookingId/reportDate/:date
	+ day: (yyyy-mm-dd) -> .../reportDate/2022-12-02
	+ body: none
	+ get all report of that day 
	+ return as json
	+ ex: [
			{
			service_name: Kill your bird Service
			service_report_image: death_bird.jpg
			service_report_text: your bird was fk death
			booked_price: 200
			},
			{
			service_name: Grave Service
			service_report_image: death_bird_on_grave.jpg
			service_report_text: R.I.P 
			booked_price: 200
			},
			bird_name: RaeKyo
			date: 2022-12-02
		]

- GET: /account/:accId/bookings
	 +body: none
	+ return array transaction of acc_id by array json
	+ ex:
	[
		{
			date_from: 2022-12-02
			date_to: 2022-12-04
			status: 0
			service:[ 'name1', 'name2', 'name3']
			bill: {
				total_ammount:	9999$ (each day will be 50$, + service price/days)
				payment_status:	0
				payment_method: COD
				date: 
				}
			bird: {
				name: RaeKyo
				age: 2
				image: death_bird.jpg
			}
		},
		
		{
			date_from: 2022-11-02
			date_to: 2022-11-04
			status: 1
			service:['name2', 'name3']
			bill: {
				total_ammount:	9999$ (each day will be 50$, + service price/days)
				payment_status:	0
				payment_method: COD
				date: 
				}
			bird: {
				name: RaeKyo
				age: 2
				image: death_bird.jpg
			}
		},
	]


-POST /account/:accId/:bookingId/addService
	+ body: [4, 3, 5] -> mean (4: Training, 4:Grooming, 5: Play areas)
	+ add this service to current booking



-GET /manager/transactions/on-going
	+ return all transaction with status on-going (0)
	+ as array json ex:
    [
        {
            booking_id: 1
            bird_id: 1
            bird_image: death_bird.jpg
            date_from: 2022-12-02
            date_to: 2022-12-04
            status: 1 (on-going -> remember: pending- ongoing -success-cancel)
            payment_status: COD
        }
    ]
-GET /manager/transactions/pending
-GET /manager/transactions/success
-GET /manager/transactions/cancel


-PUT /manager/transaction/:bookingId/approve
	+ change Booking with bookingId to "ongoing" status (0 -> 1)
-PUT /manager/transaction/:bookingId/complete
	+ change Booking with bookingId to "ongoing" status (1 -> 2)
-PUT /manager/transaction/:bookingId/reject
	+ change Booking with bookingId to "ongoing" status (0 -> 3)


-POST /manager/post/newPost		<== replace - POST: /posts/newPost
	body:
{
	title: how to drug your bird
	content: just kill it
	reference: http://how-to-death.org
}



----------------------------------------------------------------------------------
STATE Booking
- PUT: /account/:accId/:bookingId
	+ body: status
	+ from admin change status of booking id of user (ex: from pending -> accepted -> ongoing -> complete -> cancel)

----------------------------------------------------------------------------------
BILL
(bill will be automatically created when use POST /newBooking)

- GET /account/:accId/:bookingId/bill
	+ body: none
	+ return a bill of this booking_id
	+ include json {payment_status, payment_method, date(paymentDate), Booking: {(Bookings fulltable)} }











